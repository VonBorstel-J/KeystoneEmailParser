

# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\App.jsx --------------------

// frontend/App.jsx
/**
 * App component serves as the root of the application.
 * It includes the Header, ParserForm, ProgressBar, ResultViewer, and ToastContainer.
 */
const App = () => {
  const parsingProgress = useSelector((state) => state.parsing.parsingProgress);
  const parsingResult = useSelector((state) => state.parsing.parsingResult);
  const error = useSelector((state) => state.parsing.error);
  return (
    <div className="min-h-screen bg-gray-100 flex flex-col">
      <Header />
      <main className="container mx-auto p-4 flex-grow">
        {/* Display error if it exists */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4">
            <strong className="font-bold">Error: </strong>
            <span className="block sm:inline">{error}</span>
          </div>
        )}
        {/* Hide the form if parsing is in progress */}
        {!parsingProgress && !parsingResult && <ParserForm />}
        {/* Display progress if parsing is in progress */}
        {parsingProgress && (
          <div className="mb-4">
            <ProgressBar />
            <p className="text-gray-700 mt-2">
              Current Stage: {parsingProgress.stage} - {parsingProgress.percentage}% complete
            </p>
          </div>
        )}
        {/* Show results after parsing is complete */}
        {parsingResult && (
          <div className="mb-4">
            <ResultViewer />
            <button
              className="bg-blue-500 text-white px-4 py-2 rounded mt-4"
              onClick={() => window.location.reload()}
            >
              Start New Parsing
            </button>
          </div>
        )}
      </main>
      <ToastContainer />
    </div>
  );
};
export default App;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\index.js --------------------

// frontend\index.js
const container = document.getElementById('root');
// Make sure the container exists before trying to create a root
if (container) {
  const root = createRoot(container);
  root.render(
    <React.StrictMode>
      <Provider store={store}>
        <ErrorBoundary>
          <App />
        </ErrorBoundary>
      </Provider>
    </React.StrictMode>
  );
} else {
  console.error('Root container not found. Unable to initialize the application.');
}




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\App.jsx --------------------

// frontend/components/App.jsx
/**
 * App component serves as the root of the application.
 * It includes the Header, ParserForm, ProgressBar, ResultViewer, and ToastContainer.
 */
const App = () => {
  const { parsingProgress, parsingResult, error, toasts } = useSelector((state) => state.parsing);
  return (
    <div className="min-h-screen flex flex-col bg-gray-100">
      <Header />
      <main className="container mx-auto p-4 flex-grow">
        {/* Display error message */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4">
            <strong className="font-bold">Error: </strong>
            <span className="block sm:inline">{error}</span>
          </div>
        )}
        {/* Conditional rendering of form, progress, and results */}
        {!parsingProgress && !parsingResult && <ParserForm />}
        {parsingProgress && (
          <div className="mb-4">
            <ProgressBar />
            <p className="text-gray-700 mt-2">
              {`Stage: ${parsingProgress.stage} - ${parsingProgress.percentage}% complete`}
            </p>
          </div>
        )}
        {parsingResult && (
          <div className="mb-4">
            <ResultViewer />
            <button
              className="bg-blue-500 text-white px-4 py-2 rounded mt-4"
              onClick={() => window.location.reload()}
            >
              Start New Parsing
            </button>
          </div>
        )}
      </main>
      {/* Toast notifications */}
      <ToastContainer toasts={toasts} />
    </div>
  );
};
export default App;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\common\Modal.jsx --------------------





# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\common\Header.jsx --------------------

// frontend/components/common/Header.jsx
/**
 * Header component displays the application's title.
 */
const Header = () => (
  <header className="bg-white shadow">
    <div className="container mx-auto p-4">
      <h1 className="text-xl font-bold">Email Parsing App</h1>
    </div>
  </header>
);
export default Header;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\common\Toast.jsx --------------------

// frontend/components/common/Toast.jsx
/**
 * Toast component displays a single notification message.
 * @param {Object} props - Properties passed to the component.
 * @param {string} props.message - The message to display.
 * @param {string} props.type - Type of the toast (e.g., success, error).
 * @param {Function} props.onClose - Callback function to handle toast close.
 */
const Toast = ({ message, type, onClose }) => {
  const bgColor = type === 'error' ? 'bg-red-500' : 'bg-green-500';
  return (
    <div
      className={`fixed bottom-4 right-4 p-4 rounded shadow text-white flex items-start ${bgColor}`}
      role="alert"
      aria-live="assertive"
      aria-atomic="true"
    >
      <div className="flex-1">
        {message}
      </div>
      <button
        onClick={onClose}
        className="ml-4 bg-transparent border-none text-white font-bold"
        aria-label="Close notification"
      >
        &times;
      </button>
    </div>
  );
};
export default Toast;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\common\ToastContainer.jsx --------------------

// frontend/components/common/ToastContainer.jsx
/**
 * ToastContainer displays a list of toast notifications.
 */
const ToastContainer = () => {
  const toasts = useSelector((state) => state.parsing.toasts);
  return (
    <div>
      {toasts.map((toast) => (
        <Toast key={toast.id} message={toast.message} type={toast.type} />
      ))}
    </div>
  );
};
export default ToastContainer;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\ParsingOverlay\styles.css --------------------





# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\ParsingOverlay\StatusIndicator.jsx --------------------





# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\ParsingOverlay\ProgressBar.jsx --------------------

// frontend/components/ParsingOverlay/ProgressBar.jsx
/**
 * ProgressBar component displays the current parsing stage and progress percentage.
 */
const ProgressBar = () => {
  const parsingProgress = useSelector((state) => state.parsing.parsingProgress);
  if (!parsingProgress) return null;
  const { stage, percentage } = parsingProgress;
  return (
    <div className="mt-4">
      <h2 className="text-gray-700 mb-2">{stage}</h2>
      <div className="w-full bg-gray-200 rounded-full h-4">
        <div
          className="bg-blue-500 h-4 rounded-full"
          style={{ width: `${percentage}%` }}
        ></div>
      </div>
      <p className="text-gray-600 mt-1">{percentage}% completed</p>
    </div>
  );
};
export default ProgressBar;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\ParsingOverlay\index.jsx --------------------

// frontend/components/ResultViewer/index.jsx
/**
 * ResultViewer component displays the parsed results in different formats.
 */
const ResultViewer = () => {
  const parsingResult = useSelector((state) => state.parsing.parsingResult);
  const [view, setView] = useState('human'); // 'human' or 'json'
  // If there's no parsing result, return null to avoid rendering anything
  if (!parsingResult) return null;
  // Button list to avoid redundancy
  const views = [
    { type: 'human', label: 'Human Readable' },
    { type: 'json', label: 'JSON' },
  ];
  return (
    <div className="mt-6 bg-white p-6 rounded shadow-md">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold">Parsed Results</h2>
        <div className="flex items-center">
          {views.map(({ type, label }) => (
            <button
              key={type}
              onClick={() => setView(type)}
              className={`mr-2 px-3 py-1 rounded transition-colors duration-200 ${
                view === type ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'
              }`}
              aria-pressed={view === type}
              aria-label={`View parsed results as ${label}`}
            >
              {label}
            </button>
          ))}
        </div>
      </div>
      {/* Render the appropriate component based on the selected view */}
      {view === 'human' ? <HumanReadable data={parsingResult} /> : <JsonView data={parsingResult} />}
      {/* Download Button */}
      <div className="mt-4">
        <DownloadButton data={parsingResult} />
      </div>
    </div>
  );
};
export default ResultViewer;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\ParsingOverlay\ParserForm.jsx --------------------

const ParserForm = () => {
  const [emailContent, setEmailContent] = useState('');
  const [documentImage, setDocumentImage] = useState(null);
  const [parserOption, setParserOption] = useState('enhanced_parser');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const dispatch = useDispatch();
  useEffect(() => {
    // Set up socket event listeners
    socket.on('connect', () => {
      console.log('Socket connected:', socket.id);
    });
    socket.on('connect_error', (error) => {
      console.error('Socket connection error:', error);
      dispatch({
        type: 'SET_ERROR',
        payload: 'Connection error. Please refresh and try again.',
      });
    });
    socket.on('parsing_started', handleParsingStarted);
    socket.on('parsing_progress', handleParsingProgress);
    socket.on('parsing_completed', handleParsingCompleted);
    socket.on('parsing_error', handleParsingError);
    // Cleanup on unmount
    return () => {
      socket.off('parsing_started', handleParsingStarted);
      socket.off('parsing_progress', handleParsingProgress);
      socket.off('parsing_completed', handleParsingCompleted);
      socket.off('parsing_error', handleParsingError);
    };
  }, [dispatch]);
  const validateForm = () => {
    if (!emailContent.trim() && !documentImage) {
      dispatch({
        type: 'SET_ERROR',
        payload: 'Please provide either email content or a document image.',
      });
      return false;
    }
    return true;
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (isSubmitting) return;
    if (!validateForm()) return;
    if (!socket.connected) {
      dispatch({
        type: 'SET_ERROR',
        payload: 'No connection to server. Please refresh and try again.',
      });
      return;
    }
    try {
      setIsSubmitting(true);
      const formData = new FormData();
      formData.append('parser_option', parserOption);
      if (emailContent.trim()) {
        formData.append('email_content', emailContent.trim());
      }
      if (documentImage) {
        formData.append('document_image', documentImage);
      }
      formData.append('socket_id', socket.id);
      dispatch(startParsing(formData));
    } catch (error) {
      console.error('Error submitting form:', error);
      dispatch({
        type: 'SET_ERROR',
        payload: 'Failed to start parsing. Please try again.',
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  const handleParsingStarted = () => {
    dispatch({ type: 'START_PARSING' });
    dispatch({
      type: 'ADD_TOAST',
      payload: {
        id: Date.now(),
        type: 'info',
        message: 'Parsing started...',
      },
    });
  };
  const handleParsingProgress = (data) => {
    dispatch({
      type: 'UPDATE_PROGRESS',
      payload: data,
    });
  };
  const handleParsingCompleted = (result) => {
    setIsSubmitting(false);
    dispatch({
      type: 'COMPLETE_PARSING',
      payload: result,
    });
    dispatch({
      type: 'ADD_TOAST',
      payload: {
        id: Date.now(),
        type: 'success',
        message: 'Parsing completed successfully!',
      },
    });
  };
  const handleParsingError = (error) => {
    setIsSubmitting(false);
    console.error('Parsing error:', error);
    dispatch({
      type: 'SET_ERROR',
      payload: error.error || 'An error occurred during parsing.',
    });
    dispatch({
      type: 'ADD_TOAST',
      payload: {
        id: Date.now(),
        type: 'error',
        message: error.error || 'Parsing failed. Please try again.',
      },
    });
  };
  return (
    <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow-md">
      <div className="space-y-6">
        {/* Email Content Input */}
        <div>
          <label htmlFor="email_content" className="block text-sm font-medium text-gray-700">
            Email Content
          </label>
          <div className="mt-1">
            <textarea
              id="email_content"
              name="email_content"
              rows={6}
              value={emailContent}
              onChange={(e) => setEmailContent(e.target.value)}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="Paste your email content here..."
            />
          </div>
          <p className="mt-1 text-sm text-gray-500">
            Paste the email content you want to parse
          </p>
        </div>
        {/* Document Image Upload */}
        <div>
          <label htmlFor="document_image" className="block text-sm font-medium text-gray-700">
            Document Image
          </label>
          <div className="mt-1">
            <input
              id="document_image"
              name="document_image"
              type="file"
              accept="image/*"
              onChange={(e) => {
                const file = e.target.files?.[0];
                if (file) {
                  if (file.size > 5 * 1024 * 1024) {
                    dispatch({
                      type: 'SET_ERROR',
                      payload: 'File size must be less than 5MB',
                    });
                    return;
                  }
                  setDocumentImage(file);
                }
              }}
              className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
            />
          </div>
          <p className="mt-1 text-sm text-gray-500">
            Upload a document image (JPG, PNG, max 5MB)
          </p>
        </div>
        {/* Parser Option Selection */}
        <div>
          <label htmlFor="parser_option" className="block text-sm font-medium text-gray-700">
            Parser Option
          </label>
          <div className="mt-1">
            <select
              id="parser_option"
              name="parser_option"
              value={parserOption}
              onChange={(e) => setParserOption(e.target.value)}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
            >
              <option value="enhanced_parser">Enhanced Parser</option>
            </select>
          </div>
          <p className="mt-1 text-sm text-gray-500">
            Select the parsing method to use
          </p>
        </div>
        {/* Submit Button */}
        <div>
          <button
            type="submit"
            disabled={isSubmitting}
            className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
              isSubmitting
                ? 'bg-blue-400 cursor-not-allowed'
                : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500'
            }`}
          >
            {isSubmitting ? 'Processing...' : 'Start Parsing'}
          </button>
        </div>
      </div>
    </form>
  );
};
export default ParserForm;



# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\ResultViewer\styles.css --------------------





# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\ResultViewer\JsonView.jsx --------------------

// frontend/components/ResultViewer/JsonView.jsx
/**
 * JsonView component displays the parsed data as formatted JSON.
 * @param {Object} props - Component properties.
 * @param {Object} props.data - The parsed data to display.
 */
const JsonView = ({ data }) => (
  <pre className="bg-gray-100 p-4 rounded overflow-auto">
    {JSON.stringify(data, null, 2)}
  </pre>
);
export default JsonView;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\ResultViewer\HumanReadable.jsx --------------------

// frontend/components/ResultViewer/HumanReadable.jsx
/**
 * HumanReadable component displays the parsed data in a readable format.
 * @param {Object} props - Component properties.
 * @param {Object} props.data - The parsed data to display.
 */
const HumanReadable = ({ data }) => {
  // Example implementation; adjust based on actual data structure
  return (
    <div>
      {Object.entries(data).map(([section, fields]) => (
        <div key={section} className="mb-4">
          <h3 className="text-lg font-semibold">{section}</h3>
          <ul className="list-disc list-inside">
            {Object.entries(fields).map(([key, value]) => (
              <li key={key}>
                <strong>{key}:</strong> {Array.isArray(value) ? value.join(', ') : value}
              </li>
            ))}
          </ul>
        </div>
      ))}
    </div>
  );
};
export default HumanReadable;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\ResultViewer\DownloadButton.jsx --------------------

// frontend/components/ResultViewer/DownloadButton.jsx
/**
 * DownloadButton component enables downloading the parsed data as a JSON file.
 * @param {Object} props - Component properties.
 * @param {Object} props.data - The parsed data to download.
 */
const DownloadButton = ({ data }) => {
  const handleDownload = () => {
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    saveAs(blob, 'parsed_result.json');
  };
  return (
    <button onClick={handleDownload} className="mt-4 bg-green-500 text-white px-4 py-2 rounded">
      Download JSON
    </button>
  );
};
export default DownloadButton;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\ResultViewer\OriginalView.jsx --------------------

// frontend/components/ResultViewer/OriginalView.jsx
/**
 * OriginalView component displays the raw parsed data.
 * @param {Object} props - Component properties.
 * @param {Object} props.data - The parsed data to display.
 */
const OriginalView = ({ data }) => (
  <pre className="bg-gray-100 p-4 rounded overflow-auto">
    {JSON.stringify(data, null, 2)}
  </pre>
);
export default OriginalView;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\components\ResultViewer\index.jsx --------------------

// frontend/components/ResultViewer/index.jsx
/**
 * ResultViewer component displays the parsed results in different formats.
 */
const ResultViewer = () => {
  const parsingResult = useSelector((state) => state.parsing.parsingResult);
  const [view, setView] = useState('human'); // 'human', 'json', 'original'
  if (!parsingResult) return null;
  return (
    <div className="mt-6 bg-white p-6 rounded shadow-md">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold">Parsed Results</h2>
        <div className="flex items-center">
          {['human', 'json', 'original'].map((type) => (
            <button
              key={type}
              onClick={() => setView(type)}
              className={`mr-2 px-3 py-1 rounded transition-colors duration-200 ${
                view === type ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'
              }`}
              aria-pressed={view === type}
              aria-label={`View parsed results as ${type}`}
            >
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </button>
          ))}
        </div>
      </div>
      <div className="mb-4">
        {view === 'human' && (
          <React.Suspense fallback={<p>Loading Human Readable View...</p>}>
            <HumanReadable data={parsingResult} />
          </React.Suspense>
        )}
        {view === 'json' && (
          <React.Suspense fallback={<p>Loading JSON View...</p>}>
            <JsonView data={parsingResult} />
          </React.Suspense>
        )}
        {view === 'original' && (
          <React.Suspense fallback={<p>Loading Original View...</p>}>
            <OriginalView data={parsingResult} />
          </React.Suspense>
        )}
      </div>
      <DownloadButton data={parsingResult} />
    </div>
  );
};
export default ResultViewer;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\reducers\index.js --------------------

// frontend/reducers/index.js
/**
 * Root reducer combining all individual reducers.
 */
const rootReducer = combineReducers({
  parsing: parsingReducer,
});
// Custom middleware to handle and log errors during action dispatching
const errorHandlingMiddleware = (store) => (next) => (action) => {
  try {
    return next(action);
  } catch (error) {
    console.error('Error during action dispatch:', action, error);
    return store.dispatch({ type: 'SET_ERROR', payload: 'Something went wrong during state update.' });
  }
};
// Enable Redux DevTools Extension if available, with fallback for compose
const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;
/**
 * Redux store configured with thunk middleware, error handling, and DevTools extension.
 */
const store = createStore(
  rootReducer,
  composeEnhancers(applyMiddleware(thunk, errorHandlingMiddleware))
);
export default store;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\reducers\parsingReducer.js --------------------

// frontend/reducers/parsingReducer.js
const initialState = {
  parsingProgress: null, // { stage: string, percentage: number }
  parsingResult: null, // Parsed data
  error: null, // Error messages
  toasts: [], // Array of toast notifications
};
/**
 * Parsing reducer handles actions related to parsing progress and results.
 * @param {Object} state - Current state.
 * @param {Object} action - Dispatched action.
 * @returns {Object} - New state.
 */
const parsingReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'START_PARSING':
      return {
        ...state,
        parsingProgress: { stage: 'Starting', percentage: 0 },
        parsingResult: null,
        error: null,
      };
    case 'UPDATE_PROGRESS':
      if (action.payload && action.payload.percentage >= 0 && action.payload.percentage <= 100) {
        return {
          ...state,
          parsingProgress: {
            stage: action.payload.stage || 'In Progress',
            percentage: action.payload.percentage,
          },
        };
      } else {
        console.error('Invalid progress update received:', action.payload);
        return {
          ...state,
          error: 'Received an invalid progress update.',
        };
      }
    case 'COMPLETE_PARSING':
      if (action.payload) {
        return {
          ...state,
          parsingProgress: null,
          parsingResult: action.payload,
        };
      } else {
        console.error('Invalid parsing result received:', action.payload);
        return {
          ...state,
          error: 'Failed to complete parsing. Invalid data received.',
        };
      }
    case 'SET_ERROR':
      return {
        ...state,
        parsingProgress: null,
        parsingResult: null, // Clear any previous results on error
        error: action.payload || 'An unknown error occurred.',
      };
    case 'ADD_TOAST':
      if (action.payload && !state.toasts.some((toast) => toast.id === action.payload.id)) {
        return {
          ...state,
          toasts: [...state.toasts, action.payload],
        };
      } else {
        console.warn('Attempted to add a duplicate or invalid toast:', action.payload);
        return state;
      }
    case 'REMOVE_TOAST':
      return {
        ...state,
        toasts: state.toasts.filter((toast) => toast.id !== action.payload),
      };
    default:
      return state;
  }
};
export default parsingReducer;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\static\css\styles.css --------------------

/* frontend/static/css/styles.css */
/* Basic styles for the application */
body {
    font-family: Arial, sans-serif;
    background-color: #00356a;
  }
  .container {
    max-width: 800px;
  }
  button {
    cursor: pointer;
  }




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\core\validation.js --------------------

// frontend/core/validation.js
/**
 * Validates the parser form inputs.
 * @param {Object} inputs - The form inputs.
 * @returns {Object} - Validation result with isValid flag and message.
 */
export const validateForm = (inputs) => {
  const { parser_option, email_content, document_image } = inputs;
  // Validate parser_option
  if (!parser_option) {
    return { isValid: false, message: 'Please select a parser option.' };
  }
  // Validate email_content or document_image presence
  if (!email_content && !document_image) {
    return { isValid: false, message: 'Please provide email content or a document image.' };
  }
  // Validate email_content type and length
  if (email_content) {
    if (typeof email_content !== 'string') {
      return { isValid: false, message: 'Email content must be a valid text string.' };
    }
    if (email_content.trim().length === 0) {
      return { isValid: false, message: 'Email content cannot be empty.' };
    }
    if (email_content.trim().length > 5000) {
      return { isValid: false, message: 'Email content is too long. Please limit it to 5000 characters.' };
    }
  }
  // Validate document_image type and size
  if (document_image) {
    if (!(document_image instanceof File)) {
      return { isValid: false, message: 'Document image must be a valid file.' };
    }
    const validImageTypes = ['image/jpeg', 'image/png'];
    if (!validImageTypes.includes(document_image.type)) {
      return { isValid: false, message: 'Invalid image type. Please upload a JPEG or PNG image.' };
    }
    const maxSizeInBytes = 5 * 1024 * 1024; // 5MB
    if (document_image.size > maxSizeInBytes) {
      return { isValid: false, message: 'Document image size should not exceed 5MB.' };
    }
  }
  // If all validations pass
  return { isValid: true, message: '' };
};




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\core\socketListeners.js --------------------

// frontend/core/socketListeners.js
/**
 * Sets up socket listeners for parsing events.
 * @param {Socket} socket - The Socket.IO client instance.
 * @param {Function} dispatch - Redux dispatch function.
 */
export const setupSocketListeners = (socket, dispatch) => {
  if (!socket || typeof socket.on !== 'function') {
    console.error("Invalid socket instance provided.");
    dispatch(setError('Socket connection error. Please refresh and try again.'));
    return;
  }
  try {
    socket.on('parsing_started', (data) => {
      try {
        const toastId = Date.now();
        dispatch(addToast({ id: toastId, message: 'Parsing started', type: 'success' }));
        // Remove toast after 3 seconds
        setTimeout(() => dispatch(removeToast(toastId)), 3000);
      } catch (err) {
        console.error("Error handling 'parsing_started' event: ", err);
        dispatch(setError('An error occurred while starting the parsing process.'));
      }
    });
    socket.on('parsing_progress', (data) => {
      try {
        if (!data || typeof data.progress === 'undefined') {
          throw new Error('Invalid progress data received.');
        }
        dispatch(updateProgress(data));
      } catch (err) {
        console.error("Error handling 'parsing_progress' event: ", err);
        dispatch(setError('An error occurred while updating parsing progress.'));
      }
    });
    socket.on('parsing_completed', (data) => {
      try {
        if (!data || !data.result) {
          throw new Error('Invalid completion data received.');
        }
        dispatch(completeParsing(data.result));
        const toastId = Date.now();
        dispatch(addToast({ id: toastId, message: 'Parsing completed', type: 'success' }));
        setTimeout(() => dispatch(removeToast(toastId)), 3000);
      } catch (err) {
        console.error("Error handling 'parsing_completed' event: ", err);
        dispatch(setError('An error occurred while completing the parsing process.'));
      }
    });
    socket.on('parsing_error', (data) => {
      try {
        if (!data || !data.error) {
          throw new Error('Invalid error data received.');
        }
        dispatch(setError(data.error));
        const toastId = Date.now();
        dispatch(addToast({ id: toastId, message: `Error: ${data.error}`, type: 'error' }));
        setTimeout(() => dispatch(removeToast(toastId)), 3000);
      } catch (err) {
        console.error("Error handling 'parsing_error' event: ", err);
        dispatch(setError('An unexpected error occurred during parsing.'));
      }
    });
  } catch (err) {
    console.error("Error setting up socket listeners: ", err);
    dispatch(setError('Failed to setup socket listeners. Please try again.'));
  }
};




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\actions\api.js --------------------

// frontend/actions/api.js
/**
 * Initiates the parsing of an email by sending data to the backend.
 * @param {Object} data - The data to send for parsing.
 * @returns {Promise<Object>} - The response from the backend.
 */
export const parseEmail = async (data) => {
  try {
    const formData = new FormData();
    if (data.email_content) formData.append('email_content', data.email_content);
    if (data.document_image) formData.append('document_image', data.document_image);
    formData.append('parser_option', data.parser_option);
    formData.append('socket_id', data.socket_id);
    const response = await axios.post('/api/parse_email', formData, {
      // Remove the 'Content-Type' header
      // Axios will set it automatically, including the correct boundary
    });
    return response.data;
  } catch (error) {
    console.error('Error occurred during email parsing request:', error);
    if (error.response) {
      // Server responded with a status code outside of 2xx range
      return {
        success: false,
        message: `Parsing failed: ${error.response.data?.message || 'Unknown server error'}`,
        status: error.response.status,
      };
    } else if (error.request) {
      // Request was made but no response was received
      return {
        success: false,
        message: 'No response received from the server. Please check your network connection.',
      };
    } else {
      // Something else happened while setting up the request
      return {
        success: false,
        message: `Request setup error: ${error.message}`,
      };
    }
  }
};




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\actions\parsingActions.js --------------------

// frontend/actions/parsingActions.js
/**
 * Action to start the parsing process.
 * @param {Object} data - Data required to start parsing.
 */
export const startParsing = (data) => async (dispatch) => {
  dispatch({ type: 'START_PARSING' });
  try {
    // Generate a unique socket ID for this session if not provided
    const socketId = data.socket_id || generateId();
    const socket = socketIOClient('http://localhost:8080', {
      path: '/socket.io',
      transports: ['websocket', 'polling'],
    });
    setupSocketListeners(socket, dispatch); // Attach listeners for socket events
        // Ensure socket is connected
        if (!socket.connected) {
          throw new Error('Socket is not connected.');
        }
    await parseEmailAPI({ ...data, socket_id: socketId });
    // Parsing is handled via WebSocket events, no need to wait for response from parseEmailAPI
  } catch (error) {
    console.error('Error during parsing start:', error);
    dispatch({
      type: 'SET_ERROR',
      payload: error.response?.data?.error_message || 'Parsing failed. Please try again.',
    });
  }
};
/**
 * Action to update parsing progress.
 * @param {Object} progress - Progress data.
 */
export const updateProgress = (progress) => {
  try {
    return {
      type: 'UPDATE_PROGRESS',
      payload: progress,
    };
  } catch (error) {
    console.error('Error updating parsing progress:', error);
    return {
      type: 'SET_ERROR',
      payload: 'Failed to update progress.',
    };
  }
};
/**
 * Action to complete parsing with results.
 * @param {Object} result - Parsed data.
 */
export const completeParsing = (result) => {
  try {
    return {
      type: 'COMPLETE_PARSING',
      payload: result,
    };
  } catch (error) {
    console.error('Error completing parsing:', error);
    return {
      type: 'SET_ERROR',
      payload: 'Failed to complete parsing process.',
    };
  }
};
/**
 * Action to set an error message.
 * @param {string} error - Error message.
 */
export const setError = (error) => {
  try {
    return {
      type: 'SET_ERROR',
      payload: error,
    };
  } catch (error) {
    console.error('Error setting error message:', error);
    return {
      type: 'SET_ERROR',
      payload: 'An unknown error occurred while setting the error message.',
    };
  }
};
/**
 * Action to add a toast notification.
 * @param {Object} toast - Toast data.
 */
export const addToast = (toast) => {
  try {
    return {
      type: 'ADD_TOAST',
      payload: toast,
    };
  } catch (error) {
    console.error('Error adding toast notification:', error);
    return {
      type: 'SET_ERROR',
      payload: 'Failed to add toast notification.',
    };
  }
};
/**
 * Action to remove a toast notification.
 * @param {string} id - Toast ID to remove.
 */
export const removeToast = (id) => {
  try {
    return {
      type: 'REMOVE_TOAST',
      payload: id,
    };
  } catch (error) {
    console.error('Error removing toast notification:', error);
    return {
      type: 'SET_ERROR',
      payload: 'Failed to remove toast notification.',
    };
  }
};




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\utils\helpers.js --------------------

// frontend/utils/helpers.js
/**
 * Generates a unique identifier.
 * @returns {string} - A UUID.
 */
export const generateId = () => {
  try {
    return uuidv4();
  } catch (error) {
    console.error('Error generating UUID:', error);
    return null; // Return null if there's an error
  }
};
/**
 * Formats data into JSON or human-readable string.
 * @param {Object} data - The data to format.
 * @param {string} format - 'json' or 'human'.
 * @returns {string} - Formatted string.
 */
export const formatData = (data, format) => {
  try {
    if (!data || typeof data !== 'object') {
      throw new Error('Invalid data provided for formatting');
    }
    if (format === 'json') {
      return JSON.stringify(data, null, 2);
    }
    if (format === 'human') {
      // Formatting the data into a human-readable string
      return Object.entries(data)
        .map(([key, value]) => `${key}: ${typeof value === 'object' ? JSON.stringify(value, null, 2) : value}`)
        .join('\n');
    }
    throw new Error(`Unknown format: ${format}`);
  } catch (error) {
    console.error('Error formatting data:', error);
    return 'Formatting error: Unable to format data.';
  }
};




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\frontend\utils\socket.js --------------------

// frontend/utils/socket.js
const socket = io('http://localhost:5000', {
  path: '/socket.io',
  transports: ['websocket', 'polling']
});
// Event listener for socket connection errors
socket.on('connect_error', (error) => {
  console.error('Socket connection error:', error);
  // Here, you could potentially add more user-facing error handling like a dispatch or notification
});
// Event listener for socket reconnection attempts
socket.on('reconnect_attempt', (attemptNumber) => {
  console.warn(`Reconnection attempt #${attemptNumber}`);
});
// Event listener for successful reconnection
socket.on('reconnect', (attemptNumber) => {
  console.info(`Reconnected successfully after ${attemptNumber} attempt(s)`);
});
// Event listener for connection establishment
socket.on('connect', () => {
  console.info('Socket connection established successfully');
});
// Event listener for disconnection
socket.on('disconnect', (reason) => {
  console.warn(`Socket disconnected: ${reason}`);
  // Optionally, handle reconnection logic here if you want a specific response on disconnection
});
export default socket;




# -------------------- C:\Users\jorda\OneDrive\Desktop\Quickbase Dev Work\KeystoneEmailParser\src\parsers\enhanced_parser.py --------------------

# src/parsers/enhanced_parser.py
    ThreadPoolExecutor,
    TimeoutError as ConcurrentTimeoutError,
)
    validate_internal,
    validate_schema_internal,
)
    perform_model_based_parsing,
    initialize_model_parser,
)
ADJUSTER_INFORMATION: str = "Adjuster Information"
REQUESTING_PARTY: str = "Requesting Party"
INSURED_INFORMATION: str = "Insured Information"
ASSIGNMENT_INFORMATION: str = "Assignment Information"
class EnhancedParser(BaseParser):
    REQUIRED_ENV_VARS = ["HF_TOKEN", "HF_HOME"]
    def __init__(
        self,
        config: Optional[Dict[str, Any]] = None,
        socketio: Optional[Any] = None,
        sid: Optional[str] = None,
        logger: Optional[logging.Logger] = None,
    ):
        super().__init__()
        self.lock = threading.Lock()
        self._init_core_attributes(config, socketio, sid, logger)
        self.device: Optional[str] = None
        self.donut_processor = None
        self.donut_model = None
        self.llama_model = None
        self.loop: Optional[asyncio.AbstractEventLoop] = None
        self.executor: Optional[ThreadPoolExecutor] = None